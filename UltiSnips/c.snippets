snippet cnew "pthread condition" b
pthread_cond_t ${1:name};
pthread_cond_init(&m.$1,NULL);
printf("\t\tm.coda_$1:%d\n",m.coda_$1);
endsnippet

snippet cnew1 "pthread condition[]" b
pthread_cond_t ${1:name}[${2:N}];
int coda_$1[$2];

//init
for (int i = 0; i < $2; ++i)
{
	pthread_cond_init(&m.$1[i],NULL);
	m.coda_$1[i]=0;
}

//print_stat()
for (int i = 0; i < $2; ++i)
{
	printf("\t\tm.coda_$1[%d]: %d\n",i,m.coda_$1[i]);
}
endsnippet

snippet cnew2 "pthread condition[][]" b
pthread_cond_t ${1:name}[${2:N}][${3:N}];
int coda_$1[$2][$3];

//init
for (int i = 0; i < $2; ++i)
{
	for (int j = 0; j < $3; ++j)
	{
		pthread_cond_init(&m.$1[i][j],NULL);
		m.coda_$1[i][j]=0;
	}
}

//print_status()
for (int i = 0; i < $2; ++i)
{
		for (int j = 0; j < $3; ++j)
		{
			printf("\t\tm.coda_$1[%d][%d]: %d\n",i,j,m.coda_$1[i][j]);
		}
}
endsnippet

snippet cnew3 "pthread cond[][][]" b
pthread_cond_t ${1:name}[${2:N}][${3:N}][${4:N}];
int coda_$1[$2][$3][$4];

//init
for (int i = 0; i < $2; ++i)
{
	for (int j = 0; j < $3; ++j)
	{
		for (int k = 0; k < $4; ++k)
		{
			pthread_cond_init(&m.$1[i][j][k],NULL);
			m.coda_$1[i][j][k]=0;
		}
	}
}

//print_status()
for (int i = 0; i < $2; ++i)
{
		for (int j = 0; j < $3; ++j)
		{
			for (int k = 0; k < $4; ++k)
			{
				printf("\t\tm.coda_$1[%d][%d][%d]: %d\n",i,j,k,m.coda_$1[i][j][k]);
			}
		}
}

endsnippet

snippet mval "monitor variable" b
int ${1:name};
$0
m.$1=0;
printf("\t\tm.$1: %d\n",m.$1); 
endsnippet

snippet mval1 "var[]" b
int ${1:name}[${2:N}];
$0
m.$1[i]=0;
for (int i = 0; i < $2; ++i)
{
	printf("\t\tm.$1[%d]: %d\n",i,m.$1[i]); 
}

endsnippet

snippet mon "new empty monitor" b
typedef struct monitor
{
	pthread_mutex_t mut;
	pthread_mutex_init(&m.mut,NULL);

}monitor;

monitor m;

endsnippet
snippet ty "typedef" b
typedef struct ${1:name}
{
	int id;
}$1;

$1 new_$1(int id)
{
	$1 s; //struttura
	s.id = id;

	return s;
}

void print_${2:cliente}(cl s, char *message)
{
	printf("$2 [%d] \t|",s.id);
	print_message(message);
}
endsnippet
snippet r "rand()" 
rand()%${1:n};
endsnippet

#------------------
snippet ioroutine "entra-esce routine (per monitor)" b
$0	in${2:sigla}(&$4);
	sleep(rand()%5);
	out$2(&$4);
//${1:routine_name} $2 entra
void in$2(${3:type}* ${4:var_name})
{
	pthread_mutex_lock(&m.mut);
	while(false){ 
	
	}

	print_$1(*c,"entra");
	print_status();
	pthread_mutex_unlock(&m.mut);
}

//$1 $2 esce
void out$2($3* $4)
{
	pthread_mutex_lock(&m.mut);

	print_$1(*c,"esce");
	print_status();
	pthread_mutex_unlock(&m.mut);
}
endsnippet
snippet cw "cond_wait" b
pthread_cond_wait(&m.${1:cond},&m.mut);
endsnippet

snippet cs "cond_signal" b
pthread_cond_signal(&m.${1:cond});
endsnippet

snippet cb "cond_post" b
pthread_cond_broadcast(&m.${1:cond});
endsnippet

snippet tipo "diverso tipo" b
int ${1:tipo};
$1= rand()%${2:ntipi};
if ($1==0) //tipo 1
{
	$0
}
else if ($1==$2-1) { //ultimo tipo 

}
endsnippet

snippet srepcond "repeat while condition sem" b
while(1) {
	if (${1:cond uscita non verificata})
	{
		//do
		$0
	}
	else {
		//condizione di uscita verificata
		break;
	}
}

endsnippet

snippet ml "lock mutex" b
pthread_mutex_lock(&${1:m.}mut);
pthread_mutex_unlock(&$1mut);
endsnippet

snippet mul "unlock mutex" b
pthread_mutex_unlock(&${1:m.}mut);
endsnippet

snippet mnew "new mutex" b
pthread_mutex_t mut;
	pthread_mutex_init(&${1:m.}mut,NULL);
endsnippet

snippet slp "sleep random 5 sec" b
sleep(rand()%5);
endsnippet

snippet sval "semaphore variable" b
int ${1:name};
$0
$1=0;
printf("$1: %d\n",$1); //print_status;
endsnippet

snippet snew "new semaphore" b
static sem_t ${1:name};
	sem_init(&$1,0,0);

endsnippet
snippet sw "se sem 0 sospende th " 
sem_wait (&${1:sem});
$0
endsnippet

snippet sp "rispveglia th sospeso su sem"
sem_post (&${1:sem});
$0
endsnippet

snippet multip "(in main) create multiple thread" 
pthread_t ${1:th_name}[${2:MAXT}];
$0

//creazione $1
for (int i = 0; i < $2; ++i)
{
	if(pthread_create(&$1[i],NULL,${3:routine_name},(void *)${4:i})<0)
	{
		fprintf(stderr, "errore creazione thread $3 [%d]\n",i);
		exit(1);
	}
}

//wait $1
for (int i = 0; i < $2; ++i)
{
	if(pthread_join($1[i],NULL)){
		fprintf(stderr, "errore terminazione thread $3 [%d]\n",i);
		exit(1);
	}
	else {
		printf("thread $3 [%d] termiato con successo\n", i);
	}
}
endsnippet

snippet singp "(in main) create single thread" b
pthread_t ${1:th_name};
$0
//creazione $3
if(pthread_create(&$1,NULL,${3:routine_name},(void *)${4:0})<0)
{
	fprintf(stderr, "errore creazione thread $3\n");
	exit(1);
}

//wait $3
if(pthread_join($1,NULL)){
	fprintf(stderr, "errore terminazione thread $3 [%d]\n");
	exit(1);
}
else {
	printf("pthread $3 termiato con successo\n");
}
endsnippet

snippet sroutine "start process" b
void* ${1:routine}(void* arg)
{
	int id = (int)arg;
	printf("$1 [%d] creato\n",id);
	$0
	pthread_exit(NULL);
}
endsnippet

snippet mbar "message bar" b
printf("-----	${1:message}	------\n");
endsnippet

snippet divbar "division bar" b
printf("-----------------------------n");
endsnippet

#=======================================================================================

