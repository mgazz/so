#fai funzione che prende in input un numero e cerca la parola su cui e il cursore e scambia con input
snippet sem_import "import for semaphore" 
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <semaphore.h>

pthread_mutex_t m;
static sem_t s;
endsnippet

snippet sem "create static sem" b
static sem_t ${1:name}
endsnippet

snippet sem_init "init sem" b
static sem_t ${1:name}; //globale
sem_init(&$1,0,${2:0 for bloc|1 for free});

endsnippet

snippet sem_wait "se valore sem 0 sospende th chiamante" 
sem_wait (&${1:my_sem});
$0
endsnippet


snippet sem_post "se almeno 1 th sospeso nella coda del sem viene risvegliato, se no sem incr"
sem_post (&${1:my_sem});
$0
endsnippet

snippet pcreate "pthread_create" 
#define ${2:NUM_THREAD} 10 //globale
int i;
int ${5:retval}[$2];
pthread_t ${1:name}[$2];
for (i = 0; i < $2; ++i)
{
	if(pthread_create(&$1[i],NULL,${3:routine},(void *)${4:i})<0)
	{
		fprintf(stderr, "thread [%d] creazione: error%d\n",i);
		exit(1);
	}
}

for (i = 0; i < $2; ++i)
{
	if(pthread_join($1[i],(void *)&$5[i])){
		fprintf(stderr, "thread [%d] join: error \n",i);
		exit(1);
	}
	else {
		printf("pthread [%d] termiato con successo, $5=[%d]\n", i,$5[i]);
	}
}
$0
endsnippet

snippet mon_import "import for monitor" 
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

endsnippet


snippet monitor "monitor" 
typedef struct monitor
{
	int ${1:val};
	pthread_cond_t ${2:coda}[${4:N}]; 
	int ${5:ncoda}[$3]; 
	pthread_mutex_t mut;
} ;

monitor m; 

void init(monitor* m)
{
	int i;
	printf("----- inizializzazione monitor ------\n");
	m->$1=0;
	printf("m->$1: %d\n", m->$1);	
	$0

	for (i = 0; i < $4; ++i)
	{
		pthread_cond_init(&m->$2[i],NULL);
		m->$5[i]=0;
		printf("$5[ %d ]:%d \n",i,m->$5[i]);
	}
	pthread_mutex_init(&m->mut,NULL);
	printf("---------------------------------------\n");
}
endsnippet

snippet critic "start stop critic" b
void start${1:S}(monitor* m,${2:arg})
{
	pthread_mutex_lock(&m->mut);
	//zona critica
	$0
	pthread_mutex_unlock(&m->mut);
}

void stop$1(monitor* m,$2)
{
	pthread_mutex_lock(&m->mut);
	//zona critica

	pthread_mutex_unlock(&m->mut);
}
endsnippet

snippet routine "start process" b
void* ${1:routine}(void* arg)
{
	int id = (int)arg;
	$0
	start${2:S}(&p,id,tipo);
	sleep(1);
	stop$2(&p,id,tipo);
	pthread_exit(NULL);
}
endsnippet

snippet oldmonitor "monitor" 
typedef struct
{
	int ${1:val}
	pthread_cond_t ${2:coda}[${3:N}]; 
	int ${4:ncoda}[${3:N}]; 
	pthread_mutex_t mut;
} ${5:monitor};

$5 ${6:monitor_name};

void init($5* $6)
{
	int i;
	printf("----- inizializzazione monitor $5------\n");
	$6->$1=0;
	printf("$6->$1: %d\n", $6->$1);	

	for (i = 0; i < $3; ++i)
	{
		pthread_cond_init(&$6->$2[i],NULL);
		$6->$4[i]=0;
		printf("$4[ %d ][ %d ][ %d ]: %d \n",i,m->$4[i]);
	}
	pthread_mutex_init(&m->mut,NULL);
	printf("---------------------------------------\n");
}
endsnippet


#snippet pjoin "pthread_join" 
	#int retval[N];
#for (i = 0; i < ${1:NUM_THREAD}; ++i)
#{
	#if(pthread_join(${2:thread}[i],(void *)&${3:retval}[i])){
		#fprintf(stderr, "thread [%d] terminato con error \n",i);
		#exit(1);
	#}
	#else {
		#printf("pthread [%d] termiato con successo\n", i);
	#}
#}
#$0
#endsnippet


snippet pfun "monitor function" 
void ${1:name}(void* ${2:arg})
{
	int id = (int)arg;
	printf("thread [%d] partito \n",id);
	pthread_mutex_lock(&m${3:->mut});
	$0
	pthread_mutex_unlock(&m$3);
}
endsnippet


snippet void "(void *)" 
(void *)
endsnippet


snippet ty "typedef" b
typedef struct ${1:name}
{
	$0
};
endsnippet


#=============== old stuff ==========

snippet mal "malloc" 
(${1:type}*)malloc(${2:mult} * sizeof($1));
$0
endsnippet

snippet d "[%d]" 
[%${1:d}]$0
endsnippet

snippet chknarg "check number of argument" 
//Check number of arguments
if(argc <= ${1:number}){
	printf("Illegal number of parameters\n");
	exit(1);
}
${0}
endsnippet

snippet chkdig "check argument isdigit" 

//Check argument is digit
if(!isdigit(argv[${1:number}][0])){
	printf("%d parameter is not digit\n",argv[$1]);
	exit(1);
}
${0}
endsnippet

snippet mess "string for debugging" 
printf("th[%d]-${1:message}\n",id${2});
${0}
endsnippet

snippet vector "vector creation" 
int i;
int* vector;
vector = (int *)malloc(${1:mult}*sizeof(int));
for(i = 0; i < $1; ++i)
{
	vector[i] = rand() % range + 1;
}
printf("vector:\n");
for (i = 0; i < $1; ++i)
{
	if (i%10==0 && i!=0)
	{
		printf("\n");
	}
	printf("[%d]\t",vector[i]);
}
printf("\n");
endsnippet

