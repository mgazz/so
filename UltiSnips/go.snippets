snippet anew "ack single client" b
var ack_$2= make(chan int,MAXBUFF) 
endsnippet

snippet anew1 "ack multiple agent" b
var ack_${1:client}[MAXPROC] chan int

	for i := 0; i < ${2:nclient}; i++ { //canali ack per $1
			ack_$1[i]= make(chan int,MAXBUFF) 
	}
endsnippet

snippet rnew "new req channel " b
var req_${1:name}= make(chan int,MAXBUFF) //se prio -> buf
		fmt.Printf("req_$1:%d\t",len(req_$1))
endsnippet


snippet rnew1 "new req channel[]" b
var req_${1:name}[${3:N}]chan int 

$0	for i := 0; i < $3; i++ { 
			req_$1[i]= make(chan int,MAXBUFF) //se prio -> buf
	}

	for i := 0; i < $3; i++ { 
			fmt.Printf("req_$1[%d]: %d\t",i,len(req_$1[i]))
	}
endsnippet

snippet rnew2 "new req channel[][]" b
var req_${1:name}[${3:N}][${4:N}]chan int 

$0	for i := 0; i < $3; i++ { 
		for j := 0; j < $4; j++ { 
			req_$1[i][j]= make(chan int,MAXBUFF) //se prio -> buf
		}
	}

	for i := 0; i < $3; i++ { 
		for j := 0; j < $4; j++ { 
			fmt.Printf("req_$1[%d][%d]: %d\t",i,j,len(req_$1[i][j]))
		}
	}

endsnippet

snippet rnew3 "new req channel[][][]" b
var req_${1:name}[${3:N}][${4:N}][${5:N}]chan int 

$0	for i := 0; i < $3; i++ { 
		for j := 0; j < $4; j++ { 
			for k := 0; k < $5; k++ { 
				req_$1[i][j][k]= make(chan int,MAXBUFF) //se prio -> buf
			}
		}
	}

	for i := 0; i < $3; i++ { 
		for j := 0; j < $4; j++ { 
			for k := 0; k < $5; k++ { 
				fmt.Printf("req_$1[%d][%d][%d]: %d\t",i,j,k,len(req_$1[i][j][k]))
			}
		}
	}

endsnippet

snippet slp "time.Sleep" 
time.Sleep(time.Duration(rand.Intn(${1:sec})) * time.Second)
$0
endsnippet

snippet cond "case for server:" b
case x:= <-when(true,req_${1:client}):
	//fmt.Printf("$1 %d entrato \n",x )
	n${3:var}++
	ack_[x] <- 1

endsnippet

#snippet condio "case for server: in/out" b
#case x:= <-when(true,req_${1:client}):
	#fmt.Printf("$1 %d entrato \n",x )
	#n${2:var}++
	#ack_$1[x] <- 1

#case x:= <-when(true,uscita_$1):
	#fmt.Printf("$1 %d uscito \n",x )
	#n$2--
	#ack_$1[x] <- 1
#endsnippet

snippet tipo "client divesi?" b
var ${1:client} int
$1 = rand.Intn(${2:ntipi})
fmt.Printf("client %d | $1: %d\n", id,$1)
endsnippet

snippet req "make request" b
req_${1:client}<-id
<-ack_[id]
endsnippet

snippet sval "server variable" b
var ${1:name} int=0
	fmt.Printf("$1: %d\t",$1)
endsnippet

snippet sval1 "server variable" b
var ${1:name}[${2:N}] int
for i := 0; i < $2; i++ {
	$1[i]=${3:0}
}
for i := 0; i < $2; i++ {
	fmt.Printf("$1[%d]: %d\t",i,$1[i])
}
endsnippet
snippet singclient "single client" b
var done = make(chan bool)

func ${1:client}() {
	fmt.Printf("$1 & | avviato\n")

	fmt.Printf("$1 & | esce dal sistema\n")
	done <- true
}
	go $1()

	//attesa $1
	<-done

endsnippet

snippet singserver "single server" b
var done = make(chan bool)
var termina_$1 = make(chan bool)

func $1() {
	fmt.Printf("$1 # | avviato\n")
	for  {
		//linea di stampa stato
		fmt.Printf("$1 # |\t") 

		fmt.Printf("\n")
		select {
			
		case <-termina_$1: //terminazione server
			fmt.Printf("$1 # | termina\n")
			done <- true
			return
		}
	}
}

$0	go ${1:server}()

	//aspetta $1 
	termina_$1 <- true
	<-done
endsnippet

snippet multiserver "multipse server" b
var n${1:server} int

var done = make(chan bool)
var termina_$1= make(chan bool)

func $3(id int) {
	fmt.Printf("$3 %d | avviato\n", id)
	for  {
		//linea di stampa stato
		fmt.Printf("# |\t") 

		fmt.Printf("\n")
		select {
			
		case <-termina_$1: //terminazione server
			fmt.Printf("$1 %d | termina\n",id)
			done <- true
			return
		}
	}
}

	fmt.Printf("inserisci n$1 (max %d)? ", MAXPROC)
	fmt.Scanf("%d", &n$1)

	for i := 0; i < n$1; i++ {
		go ${3:server}(i)
	}

	//aspetta $1 
	for i := 0; i < n$1; i++ {
		termina_$1 <- true
		<-done
	}

endsnippet

snippet multiclient "let's do some shit !!!!!!" b
var done = make(chan bool)

var n${1:client} int //numero di client


func $3(id int) {
	fmt.Printf("$3 %d | avviato\n", id)

	done <- true
	fmt.Printf("$3 %d | esce dal sistema\n", id)
}

	fmt.Printf("inserisci n$1 (max %d)? ", MAXPROC)
	fmt.Scanf("%d", &n$1)

	for i := 0; i < n$1; i++ {
		go ${3:cliente}(i)
	}

	//aspetta client
	for i := 0; i < n$1; i++ {
		<-done
	}

endsnippet

#snippet snew "new server" b

#//inserisci in main
	#go ${1:cliente}()
	
	#termina_$1<- true //terminazione $1
	#<-done

#var termina_$1= make(chan bool)
#var req_$1_${2:action}= make(chan int,MAXBUFF) 
#var ack_$1= make(chan int) 

#func $1() {
	#fmt.Printf("$1 @ | avviato\n")

	#for  {
		#select {
		#case <-termina_$1: //terminaziona $1  
			#fmt.Printf("$1 @ | termina\n")
			#done <- true
			#return
		#default:

		#}
	#}
#}

#endsnippet




#snippet cnew "new clients" b

#//inserisci in main
	#var n${1:clinet} int //numero di client

	#fmt.Printf("inserisci n$1 (max %d)? ", MAXPROC)
	#fmt.Scanf("%d", &n$1)


	#for i := 0; i < n$1; i++ { //start $2
		#go ${2:cliente}(i)
	#}
	#for i := 0; i < n$1; i++ { //aspetto $2
		#<-done
	#}
#//

#func $2(id int) {
	#fmt.Printf("$2 %d | avviato\n", id)

	#done <- true
	#fmt.Printf("$2 %d | esce dal sistema\n", id)
#}

#endsnippet

snippet newclround "client wait altri client" b

//inserisci in main
	var n${1:clinet} int //numero di client

	fmt.Printf("inserisci n$1 (max %d)? ", MAXPROC)
	fmt.Scanf("%d", &n$1)


	for i := 0; i < n$1; i++ { //canali ack per $2
		ack_$2[i]= make(chan int,MAXBUFF) 
	}
	for i := 0; i < n$1; i++ { //start $2
		go ${2:cliente}(i)
	}
	for i := 0; i < n$1; i++ { //metti prima terminazione server
		termina_$2<- true
		<-done
	}
//

var termina_$2= make(chan bool)
var ack_$2[MAXPROC] chan int 
var req_$2= make(chan int,MAXBUFF) 
func $2(id int) {
	fmt.Printf("$2 %d | avviato\n", id)

	for  {
		select {
		case <-termina_$2: //terminaziona $2  
			fmt.Printf("$2 %d | termina\n",id)
			done <- true
			return
		default:

		}
	}
}

endsnippet

#snippet chan "create channel" b
#var ${1:name} = make(chan ${2:type} ${3:,buf_size})
#$0
#endsnippet

#snippet send "send in chan" b
#${1:chan} <-${2:value}
#endsnippet

#snippet get "receive from chan" b
#${1:dest_var} <-${2:chan}
#endsnippet

#snippet ch
#ch
#endsnippet

#snippet gof "go func" b
#go func() {
	#$0
#}()
#endsnippet


#snippet forep "fori" 
#for ${1:i} = 0; $1 < ${2:N}; $1++ {
	#$0
#}
#endsnippet

#snippet rfor "fori" 
#for ${1:i} := ${2:N}-1; $1>=0 ; $1-- {
	#$0
#}
#endsnippet

snippet sc "fmt.Scanf" 
fmt.Scanf("${1:%d}/n",&${2:var})
$0
endsnippet

snippet mkch "make" 
make(chan ${1:type} , ${2:size})
endsnippet

snippet range "for range" b
for i :=  range ${2:libera} {
	$0
}
endsnippet
snippet tcom " terminal comment" b
fmt.Printf("+++++++		$0		+++++++\n")
endsnippet
snippet stop "stop comment" b
fmt.Printf("+++++++++++++++++++++++\n")
endsnippet
