#include "main.h"

#define MAXT 5 
#define MAX 5  //cap max forno
#define N 2 //cap max lotto

#define T1 0
#define T2 1
#define SP 0 //speciale
#define ST 1 //standard

typedef struct lot //lotto
{
	int t; //tempo dopo cui viene estratto (sleep)
	int qta; //dimensione del lotto
	int id;
	int temperatura;
	int tipo; //tipo speciale o ordinario
}lot;

typedef struct monitor
{
	pthread_mutex_t mut;
	int in_piastrelle; //piastrelle presenti nel forno
	int piastrelle_T2_in_coda_speciali;
	int piastrelle_T2_in_coda_standard;
	int piastrelle_T1_in_coda_speciali;
	int piastrelle_T1_in_coda_standard;
	int temperatura;
	
	pthread_cond_t inserimento_piastrelle_T1_speciali;
	pthread_cond_t inserimento_piastrelle_T1_standard;
	pthread_cond_t inserimento_piastrelle_T2_speciali;
	pthread_cond_t inserimento_piastrelle_T2_standard;
	
	
}monitor;

monitor m;

void init()
{
	pthread_mutex_init(&m.mut,NULL);
	m.in_piastrelle=0;
	printf("m.in_piastrelle: %d\n",m.in_piastrelle);
	m.piastrelle_T2_in_coda_standard=0;
	printf("m.piastrelle_T2_in_coda_standard: %d\n",m.piastrelle_T2_in_coda_standard);
	m.piastrelle_T2_in_coda_speciali=0;
	printf("m.piastrelle_T2_in_coda_speciali: %d\n",m.piastrelle_T2_in_coda_speciali);
	m.piastrelle_T1_in_coda_standard=0;
	printf("m.piastrelle_T1_in_coda_standard: %d\n",m.piastrelle_T1_in_coda_standard);
	m.piastrelle_T1_in_coda_speciali=0;
	printf("m.piastrelle_T1_in_coda_speciali: %d\n",m.piastrelle_T1_in_coda_speciali);
	m.temperatura=0;
	printf("m.temperatura: %d\n",m.temperatura);

	pthread_cond_init(&m.inserimento_piastrelle_T2_standard,NULL);
	pthread_cond_init(&m.inserimento_piastrelle_T2_speciali,NULL);
	pthread_cond_init(&m.inserimento_piastrelle_T1_standard,NULL);
	pthread_cond_init(&m.inserimento_piastrelle_T1_speciali,NULL);

	
}

lot new_lotto(int id)
{
	lot l;
	l.id=id;
	l.t=rand()%10; //massimo tempo di cottura del lotto
	l.qta=rand()%N;
	l.temperatura=rand()%2;
	return l;
}

void signal() //funzione per risveglio con prio
{
	if (m.piastrelle_T2_in_coda_standard>0)
	{
		pthread_cond_signal(m.inserimento_piastrelle_T2_standard);
		
	}
	else if (m.piastrelle_T2_in_coda_speciali>0) {
		pthread_cond_signal(m.inserimento_piastrelle_T2_speciali);
	}
	else if (m.) {
		
	}

	
}

//lotto T2 entra
void inT2(lot l)
{
	pthread_mutex_lock(&m.mut);
	printf("lotto [%d] T2 entra \n",l.id);
	//NB: se temp diversa ma forno non occupato posso entrare cambiando la temeratura
	while((m.temperatura!=T2 && m.in_piastrelle>0) || //temperatura diversa e forno occupato
				MAX - m.in_piastrelle < l.qta
				) {
		if (l.tipo==ST)
		{
			m.piastrelle_T2_in_coda_standard++;
			pthread_cond_wait(&m.inserimento_piastrelle_T2_standard,&m.mut);
			m.piastrelle_T2_in_coda_standard--;
		}
		else if (l.tipo==SP) {
			m.piastrelle_T2_in_coda_speciali++;
			pthread_cond_wait(&m.inserimento_piastrelle_T2_speciali,&m.mut);
			m.piastrelle_T2_in_coda_speciali--;
		}
		else {
			printf("lotto [%d] T2 errore sul tipo di piastrella\n",l.id);
		}
	}
	//posso entrare 
	m.temperatura=T1; //male che vada non cambio il valore, se temp diversa la cambio
	m.in_piastrelle+=l.qta;
	pthread_mutex_unlock(&m.mut);
}

//lotto T2 esce
void outT2(lot l)
{
	pthread_mutex_lock(&m.mut);
	m.in_piastrelle-=l.qta;
	signal();
	printf("lotto [%d] T2 esce\n",l.id);

	pthread_mutex_unlock(&m.mut);
}
//lotto T1 entra
void inT1(lot l)
{
	pthread_mutex_lock(&m.mut);
	printf("lotto [%d] T1 entra \n",l.id);
	while((m.temperatura!=T1 && m.in_piastrelle > 0) || //temperatura diversa 
				MAX - m.in_piastrelle < l.qta
				) {
		if (l.tipo==ST)
		{
			m.piastrelle_T1_in_coda_standard++;
			pthread_cond_wait(&m.inserimento_piastrelle_T1_standard,&m.mut);
			m.piastrelle_T1_in_coda_standard--;
		}
		else if (l.tipo==SP) {
			m.piastrelle_T1_in_coda_speciali++;
			pthread_cond_wait(&m.inserimento_piastrelle_T1_speciali,&m.mut);
			m.piastrelle_T1_in_coda_speciali--;
		}
		else {
			printf("lotto [%d] T1 errore sul tipo di piastrella\n",l.id);
		}
	}
	//posso entrare nel forno
	m.temperatura=T1; //male che vada non cambio il valore, se temp diversa la cambio

	pthread_mutex_unlock(&m.mut);
}

//lotto T1 esce
void outT1(lot l )
{
	pthread_mutex_lock(&m.mut);
	m.in_piastrelle-=l.qta;
	signal();
	printf("lotto [%d] T1 esce\n",l.id);
	pthread_mutex_unlock(&m.mut);
}

void* lotto(void* arg)
{
	int id = (int)arg;
	printf("lotto [%d] creato\n",id);
	lot l=new_lotto(id);
	if (l.temperatura==T1) //tipo 1
	{
		// copia in routine
		inT1(l);
		sleep(l.t);
		outT1(l);
	}
	else if (l.temperatura==T2) { //ultimo tipo 
		// copia in routine 
		inT2(l);
		sleep(l.t);
		outT2(l);
	}
	
	pthread_exit(NULL);
}
int main(int argc, char *argv[])
{
	pthread_t lotti[MAXT];
	
	init();//in main
	
	//creazione lotti
	for (int i = 0; i < MAXT; ++i)
	{
		if(pthread_create(&lotti[i],NULL,lotto,(void *)i)<0)
		{
			fprintf(stderr, "errore creazione thread lotto [%d]\n",i);
			exit(1);
		}
	}
	
	//wait lotti
	for (int i = 0; i < MAXT; ++i)
	{
		if(pthread_join(lotti[i],NULL)){
			fprintf(stderr, "errore terminazione thread lotto [%d]\n",i);
			exit(1);
		}
		else {
			printf("thread lotto [%d] termiato con successo\n", i);
		}
	}
	
	return 0;
}
