snippets
    cnew "pthread condition" b
    cnew1 "pthread condition[]" b
    cnew2 "pthread condition[][]" b
    cnew3 "pthread cond[][][]" b
    divbar "division bar" b
    ioroutine "entra-esce routine (per monitor)" b
    mbar "message bar" b
    ml "lock mutex" b
    mnew "new mutex" b
    mon "new empty monitor" b
    mul "unlock mutex" b
    multip "create multiple thread"
    mval "monitor variable" b
    r "rand()"
    singp "create single thread" b
    slp "sleep random 5 sec" b
    snew "new semaphore" b
    sp "rispveglia th sospeso su sem"
    srepcond "repeat while condition sem" b
    sroutine "start process" b
    sval "semaphore variable" b
    sw "se sem 0 sospende th "
    tipo "diverso tipo" b
    ty "typedef" b

SEMAFORI
nome semaforo? 
	wait(del client): qual'è la condizione auspicata per procedere
	post(del server): qual'è la situazione che si libera ora che sono stato sbloccato

es: stazione(server) da cui deve passare l'utente(client)
utente: 
	auspico che stazione sia libera --> sem_wait(stazione_libera)
	stazione liberata,sono stato servito, altro utente può arrivare --> sem_post(arrivo_utente)
stazione: 
ora che sono partito stazione è libera --> sem_post(stazione_libera)	
ora che ho liberato la stazione aspetto un nuovo utente --> sem_wait(arrivo_utente)


======================================================
fai partire tutti i semafori a zero per semplicità
il server parte con post e fa wait del client
il client parte con wait e fa post per server quando finito (puo fare sleep in mezzo)
usa srepcon per server che gira fino a che condizione non soddisfatta

se hai riempimento di un contenitore: usa in repcon
if(condizione_contenitore_pieno){
	//avanza con post di th che aspettavano contenitore pieno
	//usa una cond_wait per aspettare che che contenitore si svuoti o altro
}
else{
	sem_post(prossimo_nel_contenitore)
}
NB: o contrario if(condizione_non_pieno){sem_post,sem_wait}

mutex: usa solo se modificare valori condivisi tra thread
wait e post sempre fuori a lock/unlock mutex
NB: se cambiamento val condivisi(in lock/unlock) metti messaggio dentro lock/unlock

NB: se devo aspettare condizione sul valore di una variabile sia soddifatto --> usa pthread_cond_wait

esempio:
pthread_mutex_lock(&mut); //non sempre necessario
while(condizione_non_varificata) {
	pthread_cond_wait( &cond_che_auspico_si_verifichi, &mut);
}
pthread_mutex_unlock(&mut);


======================================================

MONITOR
prima di implementare le condizioni controlla se presenti:
- differenti tipi
- condizioni di cardinalità diverse
- quindi condizione: azione_auspicata[ntipo][ntipo][card] 

Ogni condizione di attesa ha la sua coda
Tante riattivazioni quante sono le condizioni di attesa
In condizioni tieni tutti elseif e usa else per controllo errori
Se non ho vincoli di rimanenza nel sistema--> outX aggiorna le variabili e signal ma non ciclo while
Fai stampastato prima di risveglio signal e messaggio dopo risveglio del thread per verificare se il criterio usato è corretto

NB: se usi struttura in ioroutine occhio ai messaggi: da id cambia s.id
